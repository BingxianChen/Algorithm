题目描述
有一楼梯共m级，刚开始时你在第一级，若每次只能跨上一级或者二级，要走上m级，共有多少走法？注：规定从一级到一级有0种走法。
给定一个正整数int n，请返回一个数，代表上楼的方式数。保证n小于等于100。为了防止溢出，请返回结果Mod 1000000007的值。

测试样例：
3

返回：2


********************************

n=2：只有1种跳法；
n=3：两种跳法；
n>3：假设跳N级的跳法有f(n)种，
         （1）第一次跳，跳1级，则剩下N-1级的跳法有f(n-1)种；
         （2）第一次跳，跳2级，则剩下N-2级的跳法有f(n-2)种；
     所以：f(n) = f(n-1) + f(n-2)。


这题用递归的斐波那契数列算法会超时：
    public int countWays(int n) {
        // write code here

        if(n==0){
            return 0;
        }else if(n==1){
            return 1;
        }else if(n==2){
            return 2;
        }else{
            return countWays(n-1)+countWays(n-2);
        }

    }

所以可以把他改成动态规划：
     public int countWays(int n) {
        // write code here

        int dp[]=new int [n];

        dp[0]=0;
        dp[1]=1;
        dp[2]=2;
        if(n>2){
            for(int i=3;i<n;i++){
                dp[i]=(dp[i-1]+dp[i-2])%1000000007;
            }
        }
        return dp[n-1];

    }
dp[i]表示的是到第i个台阶有多少种跳法。